#include <iostream>
#include <string>
#include <vector>
#include <cctype>
#include <cstdlib>
#include <ctime>

using namespace std;

enum en_DIRS {NORTH, EAST, SOUTH, WEST};

enum en_ROOMS {VAULTLOBBY, LOCKERS, ELEVATOR, STAIRWAY, CCTV, SERVEROOM, ATMROOM, HALLWAY, BANKGARAGE,
MAINLOBBY, LOANOFFICE, TELLERS, TELLERSOFFICE, ARCHIVES, OPENAREA, STAFFROOM, PRINTEROOM, VAULTROOM, GOLDVAULT, VAULTENTRANCE};

enum en_VERBS {GET, DROP, USE, OPEN, CLOSE, EXAMINE, INVENTORY, LOOK};
enum en_NOUNS {VAULT_DOOR, GOLD, CASH, DESKS, MONITORS, ARMORED_CAR, ATMS, KEYS, MP5, MP5AMMO, SILENCER_ATT, REDDOT_ATT, SKIMASK, STIM, THERMALGOG };

const int NONE = -1;
const int DIRS = 4;
const int ROOMS = 20;
const int VERBS = 8;
const int NOUNS = 15;
vector<string> charInventory;

//ADDED
bool debug = false;

class words
{
public:
    string word;
    int code;
};

class room
{
public:
    string description;
    int exits_to_room[DIRS];
};

class noun
{
public:
    string word;
    string description;
    string examineDesc;
    int code;
    int location;
    bool can_carry;
};

void set_rooms(vector<room>& rms)
//void set_rooms(room *rms)
{
    if(debug) cout << "Starting set_rooms().\n";

    //vector<names>
    rms[VAULTROOM].description.assign("vault room");
    //vector<string> rms[VAULTROOM].exits_to_room[NORTH] = NONE;
    rms[VAULTROOM].exits_to_room[NORTH] = NONE;
    rms[VAULTROOM].exits_to_room[EAST] = GOLDVAULT;
    rms[VAULTROOM].exits_to_room[SOUTH] = VAULTENTRANCE;
    rms[VAULTROOM].exits_to_room[WEST] = NONE;

    rms[VAULTENTRANCE].description.assign("vault entrance");
    rms[VAULTENTRANCE].exits_to_room[NORTH] = NONE;
    rms[VAULTENTRANCE].exits_to_room[EAST] = LOCKERS;
    rms[VAULTENTRANCE].exits_to_room[SOUTH] = VAULTLOBBY;
    rms[VAULTENTRANCE].exits_to_room[WEST] = NONE;

    rms[VAULTLOBBY].description.assign("vault lobby");
    rms[VAULTLOBBY].exits_to_room[NORTH] = VAULTENTRANCE;
    rms[VAULTLOBBY].exits_to_room[EAST] = HALLWAY;
    rms[VAULTLOBBY].exits_to_room[SOUTH] = ELEVATOR;
    rms[VAULTLOBBY].exits_to_room[WEST] = NONE;

    rms[LOCKERS].description.assign("lockers");
    rms[LOCKERS].exits_to_room[NORTH] = NONE;
    rms[LOCKERS].exits_to_room[EAST] = NONE;
    rms[LOCKERS].exits_to_room[SOUTH] = HALLWAY;
    rms[LOCKERS].exits_to_room[WEST] = VAULTENTRANCE;

    rms[GOLDVAULT].description.assign("gold vault");
    rms[GOLDVAULT].exits_to_room[NORTH] = NONE;
    rms[GOLDVAULT].exits_to_room[EAST] = NONE;
    rms[GOLDVAULT].exits_to_room[SOUTH] = NONE;
    rms[GOLDVAULT].exits_to_room[WEST] = VAULTROOM;

    rms[ELEVATOR].description.assign("elevator");
    rms[ELEVATOR].exits_to_room[NORTH] = VAULTLOBBY;
    rms[ELEVATOR].exits_to_room[EAST] = NONE;
    rms[ELEVATOR].exits_to_room[SOUTH] = NONE;
    rms[ELEVATOR].exits_to_room[WEST] = NONE;

    rms[STAIRWAY].description.assign("main stairway");
    rms[STAIRWAY].exits_to_room[NORTH] = HALLWAY;
    rms[STAIRWAY].exits_to_room[EAST] = NONE;
    rms[STAIRWAY].exits_to_room[SOUTH] = ATMROOM;
    rms[STAIRWAY].exits_to_room[WEST] = NONE;

    rms[BANKGARAGE].description.assign("bank garage");
    rms[BANKGARAGE].exits_to_room[NORTH] = NONE;
    rms[BANKGARAGE].exits_to_room[EAST] = CCTV;
    rms[BANKGARAGE].exits_to_room[SOUTH] = NONE;
    rms[BANKGARAGE].exits_to_room[WEST] = NONE;

    rms[CCTV].description.assign("CCTV room");
    rms[CCTV].exits_to_room[NORTH] = SERVEROOM;
    rms[CCTV].exits_to_room[EAST] = BANKGARAGE;
    rms[CCTV].exits_to_room[SOUTH] = NONE;
    rms[CCTV].exits_to_room[WEST] = HALLWAY;

    rms[SERVEROOM].description.assign("server room");
    rms[SERVEROOM].exits_to_room[NORTH] = NONE;
    rms[SERVEROOM].exits_to_room[EAST] = NONE;
    rms[SERVEROOM].exits_to_room[SOUTH] = NONE;
    rms[SERVEROOM].exits_to_room[WEST] = CCTV;

    rms[ATMROOM].description.assign("ATM room");
    rms[ATMROOM].exits_to_room[NORTH] = STAIRWAY;
    rms[ATMROOM].exits_to_room[EAST] = NONE;
    rms[ATMROOM].exits_to_room[SOUTH] = MAINLOBBY;
    rms[ATMROOM].exits_to_room[WEST] = NONE;

    rms[HALLWAY].description.assign("main hallway");
    rms[HALLWAY].exits_to_room[NORTH] = LOCKERS;
    rms[HALLWAY].exits_to_room[EAST] = CCTV;
    rms[HALLWAY].exits_to_room[SOUTH] = STAIRWAY;
    rms[HALLWAY].exits_to_room[WEST] = VAULTLOBBY;

    rms[MAINLOBBY].description.assign("main lobby");
    rms[MAINLOBBY].exits_to_room[NORTH] = ATMROOM;
    rms[MAINLOBBY].exits_to_room[EAST] = TELLERS;
    rms[MAINLOBBY].exits_to_room[SOUTH] = ARCHIVES;
    rms[MAINLOBBY].exits_to_room[WEST] = LOANOFFICE;

    rms[LOANOFFICE].description.assign("loan office");
    rms[LOANOFFICE].exits_to_room[NORTH] = NONE;
    rms[LOANOFFICE].exits_to_room[EAST] = MAINLOBBY;
    rms[LOANOFFICE].exits_to_room[SOUTH] = NONE;
    rms[LOANOFFICE].exits_to_room[WEST] = NONE;

    rms[TELLERS].description.assign("tellers");
    rms[TELLERS].exits_to_room[NORTH] = NONE;
    rms[TELLERS].exits_to_room[EAST] = TELLERSOFFICE;
    rms[TELLERS].exits_to_room[SOUTH] = NONE;
    rms[TELLERS].exits_to_room[WEST] = MAINLOBBY;

    rms[TELLERSOFFICE].description.assign("teller's office");
    rms[TELLERSOFFICE].exits_to_room[NORTH] = NONE;
    rms[TELLERSOFFICE].exits_to_room[EAST] = NONE;
    rms[TELLERSOFFICE].exits_to_room[SOUTH] = NONE;
    rms[TELLERSOFFICE].exits_to_room[WEST] = TELLERS;

    rms[ARCHIVES].description.assign("archives");
    rms[ARCHIVES].exits_to_room[NORTH] = MAINLOBBY;
    rms[ARCHIVES].exits_to_room[EAST] = NONE;
    rms[ARCHIVES].exits_to_room[SOUTH] = OPENAREA;
    rms[ARCHIVES].exits_to_room[WEST] = NONE;

    rms[OPENAREA].description.assign("open area");
    rms[OPENAREA].exits_to_room[NORTH] = ARCHIVES;
    rms[OPENAREA].exits_to_room[EAST] = STAFFROOM;
    rms[OPENAREA].exits_to_room[SOUTH] = NONE;
    rms[OPENAREA].exits_to_room[WEST] = NONE;

    rms[STAFFROOM].description.assign("staff room");
    rms[STAFFROOM].exits_to_room[NORTH] = NONE;
    rms[STAFFROOM].exits_to_room[EAST] = NONE;
    rms[STAFFROOM].exits_to_room[SOUTH] = NONE;
    rms[STAFFROOM].exits_to_room[WEST] = OPENAREA;

    rms[PRINTEROOM].description.assign("printer room");
    rms[PRINTEROOM].exits_to_room[NORTH] = OPENAREA;
    rms[PRINTEROOM].exits_to_room[EAST] = NONE;
    rms[PRINTEROOM].exits_to_room[SOUTH] = NONE;
    rms[PRINTEROOM].exits_to_room[WEST] = NONE;
}

void set_directions(vector<words>& dir)
//void set_directions(words *dir)
{
    if(debug) cout << "Starting set_directions().\n";
    dir[NORTH].code = NORTH;
    dir[NORTH].word = "NORTH";
    dir[EAST].code = EAST;
    dir[EAST].word = "EAST";
    dir[SOUTH].code = SOUTH;
    dir[SOUTH].word = "SOUTH";
    dir[WEST].code = WEST;
    dir[WEST].word = "WEST";
}

void set_verbs(vector<words>& vbs)
//void set_verbs(words *vbs)
{
    if(debug) cout << "Starting set_verbs().\n";
    //enum  en_VERBS {GET, DROP, USE, OPEN, CLOSE, EXAMINE, INVENTORY, LOOK};
    vbs[GET].code = GET;
    vbs[GET].word = "GET";
    vbs[DROP].code = DROP;
    vbs[DROP].word = "DROP";
    vbs[USE].code = USE;
    vbs[USE].word = "USE";
    vbs[OPEN].code = OPEN;
    vbs[OPEN].word = "OPEN";
    vbs[CLOSE].code = CLOSE;
    vbs[CLOSE].word = "CLOSE";
    vbs[EXAMINE].code = EXAMINE;
    vbs[EXAMINE].word = "EXAMINE";
    vbs[INVENTORY].code = INVENTORY;
    vbs[INVENTORY].word = "INVENTORY";
    vbs[LOOK].code = LOOK;
    vbs[LOOK].word = "LOOK";
}
void set_nouns(vector<noun>& nns)
//void set_nouns(noun *nns)
{
    if(debug) cout << "Starting set_nouns().\n";
    //enum en_NOUNS {STORE_DOOR, MAGNET, METER, ROULETTE, MONEY, FISHROD};
    
    nns[VAULT_DOOR].word = "DOOR";
    nns[VAULT_DOOR].code = VAULT_DOOR;
    nns[VAULT_DOOR].description = "a door to the vault room";
    nns[VAULT_DOOR].can_carry = false;
    nns[VAULT_DOOR].location = VAULTENTRANCE;
    nns[VAULT_DOOR].examineDesc = "The door is gold with a big lock on it.";

    nns[GOLD].word = "GOLD";
    nns[GOLD].code = GOLD;
    nns[GOLD].description = "gold bars";
    nns[GOLD].can_carry = true;
    nns[GOLD].location = GOLDVAULT;
    nns[GOLD].examineDesc = "The gold bars are 27.4 pounds.";

    nns[CASH].word = "CASH";
    nns[CASH].code = CASH;
    nns[CASH].description = "cash";
    nns[CASH].can_carry = true;
    nns[CASH].location = VAULTROOM;
    nns[CASH].examineDesc = "Each brick of money is 2 inches tall and hold 200 bills.";

    nns[KEYS].word = "KEYS";
    nns[KEYS].code = KEYS;
    nns[KEYS].description = "a set of keys";
    nns[KEYS].can_carry = true;
    nns[KEYS].location = STAFFROOM;
    nns[KEYS].examineDesc = "A ring of keys, one consisting of a key to the vaultroom.";
    //seeding random number generator for location of items that I want
    //(I know cash keys and gold are carryable but I want them in exact locations)
    srand(static_cast<unsigned short>(time(0)));

    short mp5Num = rand() % 16;
    nns[MP5].word = "MP5";
    nns[MP5].code = MP5;
    nns[MP5].description = "an MP5";
    nns[MP5].can_carry = true;
    //nns[MP5].location = TELLERS;
    nns[MP5].location = mp5Num;
    nns[MP5].examineDesc = "The MP5 (German: Maschinenpistole 5) is a 9x19mm Parabellum submachine gun, developed in the 1960s by a team of engineers from the German small arms manufacturer Heckler & Koch GmbH (H&K) of Oberndorf am Neckar.";

    short mp5AmmoNum = rand() % 16;
    nns[MP5AMMO].word = "MP5AMMO";
    nns[MP5AMMO].code = MP5AMMO;
    nns[MP5AMMO].description = "ammo for an Mp5";
    nns[MP5AMMO].can_carry = true;
    nns[MP5AMMO].location = mp5AmmoNum;
    nns[MP5AMMO].examineDesc = "MP5 ammo is 9×19mm Parabellum 10mm Auto 7.62×25mm.";

    nns[ATMS].word = "ATMS";
    nns[ATMS].code = ATMS;
    nns[ATMS].description = "lots of ATMs";
    nns[ATMS].can_carry = false;
    nns[ATMS].location = ATMROOM;
    nns[ATMS].examineDesc = "An ATM, which stands for automated teller machine, is a specialized computer that makes it convenient to manage a bank account holder's funds.";

    short silencerNum = rand() % 16;
    nns[SILENCER_ATT].word = "SILENCER_ATT";
    nns[SILENCER_ATT].code = SILENCER_ATT;
    nns[SILENCER_ATT].description = "an silencer attachment";
    nns[SILENCER_ATT].can_carry = true;
    nns[SILENCER_ATT].location = silencerNum;
    nns[SILENCER_ATT].examineDesc = "Attachment to reduce the sound of the ammo by 50%.";

    short reddotNum = rand() % 16;
    nns[REDDOT_ATT].word = "REDDOT_ATT";
    nns[REDDOT_ATT].code = REDDOT_ATT;
    nns[REDDOT_ATT].description = "an reddot attachment";
    nns[REDDOT_ATT].can_carry = true;
    nns[REDDOT_ATT].location = reddotNum;
    nns[REDDOT_ATT].examineDesc = "Attachment sight that has a red dot in the middle of the optic.";

    nns[DESKS].word = "DESKS";
    nns[DESKS].code = DESKS;
    nns[DESKS].description = "some desks";
    nns[DESKS].can_carry = false;
    nns[DESKS].location = MAINLOBBY;
    nns[DESKS].examineDesc = "Office desks with papers scattered on them.";

    short skimaskNum = rand() % 16;
    nns[SKIMASK].word = "SKIMASK";
    nns[SKIMASK].code = SKIMASK;
    nns[SKIMASK].description = "an ski mask";
    nns[SKIMASK].can_carry = true;
    nns[SKIMASK].location = skimaskNum;
    nns[SKIMASK].examineDesc = "An mask that covers your whole face.";

    short stimNum = rand() % 16;
    nns[STIM].word = "STIM";
    nns[STIM].code = STIM;
    nns[STIM].description = "stim";
    nns[STIM].can_carry = true;
    nns[STIM].location = stimNum;
    nns[STIM].examineDesc = "Military stimulant that cauterizes combat wounds and refreshes Tactical Sprint.";
    
    short thermalNum = rand() % 16;
    nns[THERMALGOG].word = "THERMALGOG";
    nns[THERMALGOG].code = THERMALGOG;
    nns[THERMALGOG].description = "thermal goggles";
    nns[THERMALGOG].can_carry = true;
    nns[THERMALGOG].location = thermalNum;
    nns[THERMALGOG].examineDesc = "Goggles designed to detect the infrared light, it also shows the hotter and colder areas around you.";


    nns[MONITORS].word = "MONITORS";
    nns[MONITORS].code = MONITORS;
    nns[MONITORS].description = "some monitors";
    nns[MONITORS].can_carry = false;
    nns[MONITORS].location = CCTV;
    nns[MONITORS].examineDesc = "Screens on desks for work.";

    nns[ARMORED_CAR].word = "ARMORED_CAR";
    nns[ARMORED_CAR].code = ARMORED_CAR;
    nns[ARMORED_CAR].description = "an armored car";
    nns[ARMORED_CAR].can_carry = false;
    nns[ARMORED_CAR].location = BANKGARAGE;
    nns[ARMORED_CAR].examineDesc = "The vehicle is F150 with bulletproof armor panels on the roof and the cabin and protective frames over the lights, as well as bullet resistant windows that rarely shatter under small arms fire.";
}

void section_command(string Cmd, string &wd1, string &wd2)
{
    if(debug)
    {
        cout << "Starting section_command().\n";
        cout << "Cmd = " << Cmd << endl;
        cout << "wd1 = " << wd1 << endl;
        cout << "wd2 = " << wd2 << endl;

    }

    string sub_str;
    vector<string> words;
    char search = ' ';
    short i, j;

    if(debug) cout << "Starting first for loop.\n";

    for(i = 0; i < Cmd.size(); i++)
    {
        if(Cmd.at(i) != search)
        {
            sub_str.insert(sub_str.end(), Cmd.at(i));
        }
        if(i == Cmd.size() - 1)
        {
            words.push_back(sub_str);
            sub_str.clear();
        }
        if(Cmd.at(i) == search)
        {
            words.push_back(sub_str);
            sub_str.clear();
        }
    }

    if(debug) cout << "Starting second for loop.\n";

    for(i = words.size() - 1; i > 0; i--)
    {
        if(words.at(i) == "")
        {
            words.erase(words.begin() + i);
        }
    }


    if(debug) cout << "Starting third for loop.\n";

    for(i = 0; i <words.size(); i++)
    {
        for(j = 0; j <words.at(i).size(); j++)
        {
            if(islower(words.at(i).at(j)))
            {
                words.at(i).at(j) = toupper(words.at(i).at(j));
            }
        }
    }

    if(debug) cout << "For loops are finished, starting ifs.\n"; 

    if(words.size() == 0)
    {
        cout << "No command given" << endl;
    }
    if(words.size() == 1)
    {
        wd1 = words.at(0);
    }
    if(words.size() == 2)
    {
        wd1 = words.at(0);
        wd2 = words.at(1);
    }
    if(words.size() > 2)
    {
        cout << "Command too long. Only type one or two words (direction or verb and noun)" << endl;
    }
    if(debug)
    {
        cout << "Section_command is finished.\n";
        cout << "wd1 = " << wd1 << endl;
        cout << "wd2 = " << wd2 << endl;
    }
}

void get_inventory()
{
    int i;
    if(charInventory.size() > 0)
    {
        cout << "You are currently holding:" << endl;
        for(i = 0; i < charInventory.size(); i++)
        {
        cout << charInventory[i] << endl;
        }
    }
    else
    {
        cout << "You do not have anything in your inventory" << endl;
    } 
}

void look_around(int Loc, vector<room>& rms, vector<words>& dir, vector<noun>& nns)
{
    if(debug) cout << "Starting look_around().\n";

    int i;
    cout << "I am in a " << rms[Loc].description << "." << endl;

    for(i = 0; i < DIRS; i++)
    {
        if(rms[Loc].exits_to_room[i] != NONE)
        {
            cout << "there is an exit " << dir[i].word << " to a " << rms[rms[Loc].exits_to_room[i]].description << "." << endl;
        }
    }

    //The look command should check which objects(nouns) are in the current room and report them to the player.
    for(i = 0; i < NOUNS; i++)
    {
        if(nns[i].location == Loc)
        {
            cout << "I see " << nns[i].description << "." << endl;
        }
    }
}

bool parser(int &Loc, string wd1, string wd2, vector<words>& dir, vector<words>& vbs, vector<room>& rms, vector<noun>& nns)
{
    if(debug) 
    {
        cout << "Starting parser().\n";
        cout << "loc = " << Loc << endl;
        cout << "wd1 = " << wd1 << endl;
        cout << "wd2 = " << wd2 << endl;
        //cout << "first dir in dir = " << dir.word << endl;
        //cout << "first verb in vbs = " << (*vbs).word << endl;
        //cout << "first room in rms = " << (*rms).description << endl;
        //cout << "first noun in nns = " << (*nns).word << endl;

    }

    static bool doorIsOpen = false;

    int i;
    for(i = 0; i < DIRS; i++)
    {
        if(wd1 == dir[i].word)
        {
            if(rms[Loc].exits_to_room[dir[i].code] != NONE)
            {
                Loc = rms[Loc].exits_to_room[dir[i].code];
                cout << "I am now in a " << rms[Loc].description << "." << endl;
                //A special case for the vault entrance vaultroom door.
                if(Loc == VAULTROOM || Loc == VAULTENTRANCE)
                {
                    nns[VAULT_DOOR].location = Loc;
                }
                return true;
            }
            else
            {
                cout << "No exit that way." << endl;
                return true;
            }
        }
    }


    int VERB_ACTION = NONE;
    int NOUN_MATCH = NONE;

    for(i = 0; i < VERBS; i++)
    {
        //if "OPEN" = OPEN
        if(wd1 == vbs[i].word)
        {
            //VERB_ACTION = 4
            VERB_ACTION = vbs[i].code;
            break;
        }
    }

    if(wd2 != "")
    {
        for(i = 0; i < NOUNS; i++)
        {
            //if "DOOR" = DOOR
            if(wd2 == nns[i].word)
            {
                //NOUN_MATCH = 7
                NOUN_MATCH = nns[i].code;
                break;
            }
        }
    }

    if(debug)
    {
        cout << "verb action = " << VERB_ACTION << endl;
        cout << "nounmatch = " << NOUN_MATCH << endl;
    }

    if(VERB_ACTION == INVENTORY)
    {
        get_inventory();
    }


    if(VERB_ACTION == GET)
    {
        if(NOUN_MATCH == CASH || GOLD || KEYS || MP5 || MP5AMMO || SILENCER_ATT || REDDOT_ATT || SKIMASK || STIM || THERMALGOG)
        {
            for(int i = 0; i < NOUNS; i++)
            {
                if(nns[i].location == Loc)
                {
                    if(nns[i].can_carry == true)
                    {
                        charInventory.push_back(nns[i].word);
                        cout << nns[i].word << " has been added to your inventory!" << endl;
                        nns[i].location = NONE;
                    }
                } 
            }
        }
        return true;
    }

    if(VERB_ACTION == DROP)
    {
        if(NOUN_MATCH == CASH || GOLD || KEYS || MP5 || MP5AMMO || SILENCER_ATT || REDDOT_ATT || SKIMASK || STIM || THERMALGOG)
        {
            for(int i = 0; i < NOUNS; i++)
            {
                if(charInventory[i] == nns[i].word)
                {
                    charInventory.pop_back();
                    cout << nns[i].word << " has been dropped!" << endl;
                    nns[i].location = Loc;
                }
            } 
        }
        return true;
    }

    if(VERB_ACTION == EXAMINE)
    {
        if(NOUN_MATCH == CASH || GOLD || KEYS || MP5 || MP5AMMO || SILENCER_ATT || REDDOT_ATT || SKIMASK || STIM || THERMALGOG)
        {
            for(int i = 0; i < NOUNS; i++)
            {
                if(nns[i].location == Loc)
                {
                    cout << nns[i].word << " description:\n" << nns[i].examineDesc << endl;
                } 
            }
        }
        return true;
    }



    //PUT NEW VERBS HERE
    if(VERB_ACTION == CLOSE)
    {
        if(NOUN_MATCH == VAULT_DOOR)
        {
            if(Loc == VAULTENTRANCE || Loc == VAULTROOM)
            {
                    if(doorIsOpen == true)
                {
                    doorIsOpen = false;
                    rms[VAULTENTRANCE].exits_to_room[NORTH] = NONE;
                    rms[VAULTROOM].exits_to_room[SOUTH] = NONE;
                    nns[VAULT_DOOR].description.clear();
                    nns[VAULT_DOOR].description.assign("an closed vault room door");
                    cout << "The vault door has been closed." << endl;
                    return true;
                }
                else if(doorIsOpen == false)
                {
                    cout << "The door is already closed." << endl;
                    return true;
                }
            }
            else
            {
                cout << "There is no door to open here." << endl;
                return true;
            }
        }
        else
        {
            cout << "Opening that is not possible." << endl;
            return true;
        }
    }

    if(VERB_ACTION == NONE)
    {
        cout << "No valid command entered." << endl;
        return true;
    }
    
    if(VERB_ACTION == LOOK)
    {
        look_around(Loc, rms, dir, nns);
        return true;
    }

    //Actions for usage of VERB OPEN
    if(VERB_ACTION == OPEN)
    {
        if(NOUN_MATCH == VAULT_DOOR)
        {
            if(Loc == VAULTENTRANCE || Loc == VAULTROOM)
            {
                if(doorIsOpen == false)
                {
                    doorIsOpen = true;
                    rms[VAULTENTRANCE].exits_to_room[NORTH] = VAULTROOM;
                    rms[VAULTROOM].exits_to_room[SOUTH] = VAULTENTRANCE;
                    nns[VAULT_DOOR].description.clear();
                    nns[VAULT_DOOR].description.assign("an open vault room door");
                    cout << "The vault door has been opened." << endl;
                    return true;
                }
                else if(doorIsOpen == true)
                {
                    cout << "The door is already open." << endl;
                    return true;
                }
            }
            else
            {
                cout << "There is no door to open here." << endl;
                return true;
            }
        }
        else
        {
            cout << "Opening that is not possible." << endl;
            return true;
        }
    }
    return false;
}

int main()
{
    if(debug) cout << "Starting main().\n";
    
    string command;
    string word_1;
    string word_2;

    vector<room> rooms(ROOMS);
    //room rooms[ROOMS];
    set_rooms(rooms);

    vector<words> directions(DIRS);
    //words directions[DIRS];
    set_directions(directions);

    vector<words> verbs(VERBS);
    //words verbs[VERBS];
    set_verbs(verbs);

    vector<noun> nouns(NOUNS);
    //noun nouns[NOUNS];
    set_nouns(nouns);

    int location = VAULTENTRANCE;

    if(debug) cout << "Setup is complete. Starting the main game loop.\n";

    while(word_1 != "QUIT")
    {
        command.clear();
        cout << "What shall I do? ";
        getline(cin, command);

        word_1.clear();
        word_2.clear();

        section_command(command, word_1, word_2);

        if(word_1 != "QUIT")
        {
            parser(location, word_1, word_2, directions, verbs, rooms, nouns);
        }
    }
    return 0;
}
